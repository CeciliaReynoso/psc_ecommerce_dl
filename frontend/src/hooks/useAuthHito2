import { useState, useEffect } from 'react';
import axios from '../config/axiosConfig';
import { encrypt, decrypt } from '../helpers/cryptoUtils';
import { ENDPOINT } from '../config/constans';

const useAuth = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const encryptedToken = window.sessionStorage.getItem('token');
    const encryptedEmail = window.sessionStorage.getItem('email');

    if (encryptedToken && encryptedEmail) {
      const token = decrypt(encryptedToken);
      const email = decrypt(encryptedEmail);

      axios.get(ENDPOINT.user, {
        headers: { Authorization: `Bearer ${token}` },
        params: { email }
      })
        .then(response => {
          setUser(response.data);
          // Guardar nombre y rol en localStorage
          localStorage.setItem('userNombre', response.data.nombre);
          localStorage.setItem('userRol', response.data.rol);
          localStorage.setItem('userDireccion', response.data.direccion);
        })
        .catch(error => {
          console.error('Error al obtener los datos del usuario:', error);
          window.sessionStorage.removeItem('token');
          window.sessionStorage.removeItem('email');
        });
    }
  }, []);

  const isLoading = async (email, password) => {
    try {
      const response = await axios.post(ENDPOINT.login, { email, password });
      const token = response.data.token;
      const role = response.data.rol;
      window.sessionStorage.setItem('token', encrypt(token));
      window.sessionStorage.setItem('email', encrypt(email));

      // Hacer una solicitud adicional para obtener los datos del usuario
      const userResponse = await axios.get(ENDPOINT.user, {
        headers: { Authorization: `Bearer ${token}` },
        params: { email }
      });

      setUser(userResponse.data);

      // Guardar nombre y rol en localStorage
      localStorage.setItem('userNombre', userResponse.data.nombre);
      localStorage.setItem('userRol', userResponse.data.rol);
      localStorage.setItem('userDireccion', userResponse.data.direccion);

      return userResponse.data;
    } catch (error) {
      console.error('Error al iniciar sesiÃ³n:', error.response.data);
      throw error;
    }
  };

  const logout = () => {
    window.sessionStorage.removeItem('token');
    window.sessionStorage.removeItem('email');
    localStorage.removeItem('userNombre');
    localStorage.removeItem('userRol');
    localStorage.removeItem('userDireccion');
    setUser(null);
    window.location.href = '/';
  };

  return { user, isLoading, logout };
};

export default useAuth;